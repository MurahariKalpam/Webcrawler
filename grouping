from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from crawl_new_classifier.properties import DAProperties
from crawl_new_classifier.logg import ManualLogger as m
import pandas as pd
import crawl_new_classifier.forms_latest as forms_latest
import traceback

def group_interactive_elems(driver, interactive_elms):
    grop_dict = dict()
    group_elms = list()
    group_elms_xpath = list()
    groupNo = 0
    for elm in interactive_elms:
        if elm.get_attribute('type') not in ['hidden', 'file']:
            if elm.is_displayed():
                if elm.tag_name == 'input' and elm.get_attribute('type') != 'button'  and elm.get_attribute("type") != 'submit':
                    group_elms.append(elm.get_attribute("outerHTML"))
                    group_elms_xpath.append(forms_latest.get_locator(driver, elm))
                elif elm.tag_name == 'select':
                    group_elms.append(elm.get_attribute("outerHTML"))
                    group_elms_xpath.append(forms_latest.get_locator(driver, elm))
                elif elm.tag_name == 'a' and elm.get_attribute("onclick") is not None:
                    group_elms.append(elm.get_attribute("outerHTML"))
                    group_elms_xpath.append(forms_latest.get_locator(driver, elm))
                    groupNo = groupNo + 1
                    grop_dict[groupNo] = [driver.current_url, group_elms, group_elms_xpath]
                    group_elms = list()
                    group_elms_xpath = list()
                elif elm.tag_name == 'button' or elm.get_attribute('type') == 'button'  or elm.get_attribute("type") == 'submit':
                    group_elms.append(elm.get_attribute("outerHTML"))
                    group_elms_xpath.append(forms_latest.get_locator(driver, elm))
                    groupNo = groupNo + 1
                    grop_dict[groupNo] = [driver.current_url, group_elms, group_elms_xpath]
                    group_elms = list()
                    group_elms_xpath = list()             
    return grop_dict


def export_grouping_to_file(df, driver):
    try:
        cols = ['Group', 'url', 'Elements', 'Xpath']
        url = driver.current_url
        #df = pd.DataFrame.from_dict(dataframe, orient='index').reset_index()
        df.rename(columns={'index': cols[0], 0: cols[1], 1: cols[2], 2: cols[3]}, inplace=True)
        flatternurl = ''.join(i for i in url if i.isalnum())
        url_path_ = DAProperties.INPUT_ELEMENTS_FILE_DIRECTORY.value + flatternurl + '-GROUPING_ELEMENTS' + '.xlsx'
        writer = pd.ExcelWriter(url_path_, engine='xlsxwriter', options={'strings_to_urls': False})
        df.to_excel(writer)
        writer.close()
    except Exception as ex:
        print(ex)


def main(driver):
    grouping_df = pd.DataFrame()
    try:
        logger = m(driver.current_url, 999)
        bodyelm= driver.find_element_by_tag_name('body')
        child_elms= bodyelm.find_elements_by_xpath('.//*')
        include_tags = ['input','select','button','textarea']
        interactive_elms = list()
        child_count = len(child_elms)
        print(child_count)
        for i in child_elms:
            if i.tag_name in include_tags:
                interactive_elms.append(i)
                print(i.tag_name,i.get_attribute('outerHTML'))
            elif i.tag_name == 'a' and i.get_attribute("onclick") is not None:
                interactive_elms.append(i)
                print(i.tag_name,i.get_attribute('outerHTML'))
        print('=======')
        print(len(interactive_elms))
        
        grouping_dict = group_interactive_elems(driver, interactive_elms)
        df = pd.DataFrame.from_dict(grouping_dict, orient='index').reset_index()
        grouping_df = grouping_df.append(df, ignore_index=True)
        export_grouping_to_file(grouping_df, driver)
            
    except Exception as e:
        print(traceback.format_exc(), e)

from crawl_new_classifier import playground as defaultcrawler
defaultcrawler.main('https://www.mightymatcha.com/')
